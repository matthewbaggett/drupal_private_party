<?php 

function private_party_menu(){
	$items['admin/private_party'] = array(
		'title'				=> 'Administer Private Party Users',
		'description' 		=> 'Administer Private Party Users',
		'page callback' 	=> 'private_party_users_list',
		//'file' 			=> 'private_party.users.inc',
		'access callback' 	=> 'private_party_check_permission',
		'access arguments' 	=> array('administer users')
	);
	$items['user/%/private_party/invite'] = array(
		'page callback' 	=> 'private_party_send_invite',
		'page arguments'	=> array(1),
		//'file' 			=> 'private_party.users.inc',
		'access callback' 	=> 'private_party_check_permission',
		'access arguments' 	=> array('administer users')
	);
	
	return $items;
}

/**
 * Generate a random key
 * @return string
 */
function _private_party_get_key(){
	return sha1(microtime(true).mt_rand(10000,90000));
}

function private_party_send_invite($uid){
	$account = user_active_record::loadById($uid);
	if($account){
		$account->pp_onetime_key = _private_party_get_key();
		$account->pp_onetime_sent = 'Yes';
		$account->save();
		$params['account'] = $account;
		drupal_mail('private_party', 'onetime_key', $account->mail, user_preferred_language($account), $params);
		drupal_set_message("Sent a one-time key to {$account->name}'s {$account->mail} mailbox");
	}
	header("Location: {$_SERVER['HTTP_REFERER']}");
}

function private_party_mail($key, &$message, $params) {
	$data['user'] = $params['account'];
	$data['onetimekey'] = $params['account'];
	$options['language'] = $message['language'];
	user_mail_tokens($variables, $data, $options);
	switch($key) {
		case 'onetime_key':
			$langcode = $message['language']->language;
			$message['subject'] = t('Notification from [site:name]', $variables, array('langcode' => $langcode));
			$message['body'][] = t("Dear [site:name]\n\nYour one time key is [user:one-time-login-url]", $variables, array('langcode' => $langcode));
			break;
	}
}

function private_party_users_list(){
	$view = new StdClass();
	$view->users = user_active_record::search()
							->order('name','asc')
							->exec();
	return private_party_template_view("templates/users_list.phtml", $view);
}

function private_party_check_permission($permission){
	global $user;
	$result = user_access($permission, $user);
	return $result;
}

/**
 * Crunch through a view
 * @param string $file File of the template to call.
 * @param array|object $view Optional view array.
 * @return string
 */
function private_party_template_view($file, $view = null){
	$file = DRUPAL_ROOT . "/" . drupal_get_path('module','private_party') . "/" . $file;
	if(!file_exists($file)){
		return "Cannot find {$file}";
	}
	extract((array) $view);
	ob_start();
	require($file);
	$markup = ob_get_contents();
	ob_end_clean();
	return $markup;
}